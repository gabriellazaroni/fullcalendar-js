{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielgomes/fullcalendar-js/src/components/Calendar/index.tsx\";\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport ptbr from '@fullcalendar/core/locales/pt-br';\nimport { CalendarContainer } from './styles';\nimport { endOfWeek, isWithinInterval, startOfWeek } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customContentSource = arg => {\n  const weekDays = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'];\n  return weekDays[arg.date.getUTCDay()];\n};\nexport function Calendar({\n  eventsData\n}) {\n  const handleDayCellDidMount = arg => {\n    const today = new Date();\n    const startOfCurrentWeek = startOfWeek(today, {\n      weekStartsOn: 0\n    });\n    const endOfCurrentWeek = endOfWeek(today, {\n      weekStartsOn: 0\n    });\n    if (isWithinInterval(arg.date, {\n      start: startOfCurrentWeek,\n      end: endOfCurrentWeek\n    })) {\n      arg.el.classList.add('current-week');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CalendarContainer, {\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      height: '700px',\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      headerToolbar: {\n        start: 'timeGridWeek dayGridMonth',\n        end: 'prev title next'\n      },\n      locale: ptbr,\n      dayHeaderContent: customContentSource,\n      events: eventsData,\n      dayCellDidMount: handleDayCellDidMount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","ptbr","CalendarContainer","endOfWeek","isWithinInterval","startOfWeek","jsxDEV","_jsxDEV","customContentSource","arg","weekDays","date","getUTCDay","Calendar","eventsData","handleDayCellDidMount","today","Date","startOfCurrentWeek","weekStartsOn","endOfCurrentWeek","start","end","el","classList","add","children","height","plugins","initialView","headerToolbar","locale","dayHeaderContent","events","dayCellDidMount","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gabrielgomes/fullcalendar-js/src/components/Calendar/index.tsx"],"sourcesContent":["import FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport ptbr from '@fullcalendar/core/locales/pt-br'\nimport { CalendarContainer } from './styles'\nimport {\n  endOfWeek,\n  isWithinInterval,\n  startOfWeek\n} from 'date-fns'\n\nconst customContentSource = (arg: any) => {\n  const weekDays = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'];\n  return weekDays[arg.date.getUTCDay()];\n};\n\ninterface EventProps {\n  eventsData?: {}\n}\n\nexport function Calendar({\n  eventsData\n}: EventProps\n) {\n\n  const handleDayCellDidMount = (arg: any) => {\n    const today = new Date();\n    const startOfCurrentWeek = startOfWeek(today, { weekStartsOn: 0 });\n    const endOfCurrentWeek = endOfWeek(today, { weekStartsOn: 0 });\n    if (isWithinInterval(arg.date, { start: startOfCurrentWeek, end: endOfCurrentWeek })) {\n      arg.el.classList.add('current-week');\n    }\n  };\n\n  return (\n    <CalendarContainer>\n      <FullCalendar\n        height={'700px'}\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView='dayGridMonth'\n        headerToolbar={{\n          start: 'timeGridWeek dayGridMonth',\n          end: 'prev title next',\n        }}\n        locale={ptbr}\n        dayHeaderContent={customContentSource}\n        events={eventsData}\n        dayCellDidMount={handleDayCellDidMount}\n      />\n    </CalendarContainer>\n  )\n}"],"mappings":";AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,IAAI,MAAM,kCAAkC;AACnD,SAASC,iBAAiB,QAAQ,UAAU;AAC5C,SACEC,SAAS,EACTC,gBAAgB,EAChBC,WAAW,QACN,UAAU;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjB,MAAMC,mBAAmB,GAAIC,GAAQ,IAAK;EACxC,MAAMC,QAAQ,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAClE,OAAOA,QAAQ,CAACD,GAAG,CAACE,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;AACvC,CAAC;AAMD,OAAO,SAASC,QAAQA,CAAC;EACvBC;AACU,CAAC,EACX;EAEA,MAAMC,qBAAqB,GAAIN,GAAQ,IAAK;IAC1C,MAAMO,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMC,kBAAkB,GAAGb,WAAW,CAACW,KAAK,EAAE;MAAEG,YAAY,EAAE;IAAE,CAAC,CAAC;IAClE,MAAMC,gBAAgB,GAAGjB,SAAS,CAACa,KAAK,EAAE;MAAEG,YAAY,EAAE;IAAE,CAAC,CAAC;IAC9D,IAAIf,gBAAgB,CAACK,GAAG,CAACE,IAAI,EAAE;MAAEU,KAAK,EAAEH,kBAAkB;MAAEI,GAAG,EAAEF;IAAiB,CAAC,CAAC,EAAE;MACpFX,GAAG,CAACc,EAAE,CAACC,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;IACtC;EACF,CAAC;EAED,oBACElB,OAAA,CAACL,iBAAiB;IAAAwB,QAAA,eAChBnB,OAAA,CAACV,YAAY;MACX8B,MAAM,EAAE,OAAQ;MAChBC,OAAO,EAAE,CAAC9B,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,CAAE;MAC5D6B,WAAW,EAAC,cAAc;MAC1BC,aAAa,EAAE;QACbT,KAAK,EAAE,2BAA2B;QAClCC,GAAG,EAAE;MACP,CAAE;MACFS,MAAM,EAAE9B,IAAK;MACb+B,gBAAgB,EAAExB,mBAAoB;MACtCyB,MAAM,EAAEnB,UAAW;MACnBoB,eAAe,EAAEnB;IAAsB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAExB;AAACC,EAAA,GA/Be1B,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}